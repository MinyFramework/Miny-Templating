<?php

/**
 * This file is part of the Miny framework.
 * (c) DÃ¡niel Buga <daniel@bugadani.hu>
 *
 * For licensing information see the LICENSE file.
 */

namespace Modules\Templating;

use Modules\Templating\Compiler\TemplateCompiler;
use Modules\Templating\Compiler\TemplateDescriptor;
use PHPUnit_Framework_TestCase;

require_once __DIR__ . '/../../TemplatingOptions.php';
require_once __DIR__ . '/../../Compiler/Token.php';
require_once __DIR__ . '/../../Compiler/TokenStream.php';
require_once __DIR__ . '/../../Compiler/Parser.php';
require_once __DIR__ . '/../../Compiler/SyntaxException.php';
require_once __DIR__ . '/../../Compiler/TemplateCompiler.php';
require_once __DIR__ . '/../../Compiler/Tag.php';
require_once __DIR__ . '/../../Compiler/Tags/Block.php';
require_once __DIR__ . '/../../Compiler/Tags/Blocks/IfBlock.php';
require_once __DIR__ . '/../../Compiler/Tags/Blocks/ForBlock.php';
require_once __DIR__ . '/../../Compiler/Tags/Blocks/BlockBlock.php';
require_once __DIR__ . '/../../Compiler/Tags/Blocks/TemplateBlock.php';
require_once __DIR__ . '/../../Compiler/Tags/Blocks/SwitchBlock.php';

/**
 * Test class for Log.
 * Generated by PHPUnit on 2012-07-29 at 12:57:31.
 */
class TemplateCompilerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var TemplateCompiler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TemplateCompiler(new TemplatingOptions(), new TemplateDescriptor());
    }

    public function expressionProvider()
    {
        return array(
            0  => array(
                'simple text',
                " ?>\nsimple text<?php "
            ),
            1  => array(
                '{variable}',
                'echo $this->filter($this->variable);'
            ),
            2  => array(
                '{some_tag|raw}',
                'echo $this->some_tag;'
            ),
            3  => array(
                '{some_tag|some_filter}',
                'echo $this->filter($this->some_filter($this->some_tag));'
            ),
            4  => array(
                '{some_tag|some_filter|other_filter}',
                'echo $this->filter($this->other_filter($this->some_filter($this->some_tag)));'
            ),
            5  => array(
                '{variable.key}',
                'echo $this->filter($this->getByKey($this->variable, \'key\'));'
            ),
            6  => array(
                '{variable.2}',
                'echo $this->filter($this->variable[2]);'
            ),
            7  => array(
                '{variable[key]}',
                'echo $this->filter($this->variable[$this->key]);'
            ),
            8  => array(
                '{variable[2]}',
                'echo $this->filter($this->variable[2]);'
            ),
            9  => array(
                '{variable["string_key"]}',
                'echo $this->filter($this->variable[\'string_key\']);'
            ),
            10 => array(
                '{variable[another[2]]}',
                'echo $this->filter($this->variable[$this->another[2]]);'
            ),
            11 => array(
                '{variable[another][2]}',
                'echo $this->filter($this->variable[$this->another][2]);'
            ),
            12 => array(
                '{function()}',
                'echo $this->function();'
            ),
            13 => array(
                '{function(1, 2, "string with \'apostrophe")}',
                'echo $this->function(1, 2, \'string with \\\'apostrophe\');'
            ),
            14 => array(
                '{var->function()}',
                'echo $this->filter($this->var->function());'
            ),
            15 => array(
                '{2+3*function()}',
                'echo 2+3 * $this->function();'
            ),
            16 => array(
                '{++value}',
                'echo $this->filter(++$this->value);'
            ),
            17 => array(
                '{-value}',
                'echo $this->filter(-$this->value);'
            ),
            18 => array(
                '{-2.34}',
                'echo -2.34;'
            ),
            19 => array(
                '{a ~ b}',
                'echo $this->filter($this->a . $this->b);'
            ),
            20 => array(
                '{1+(2+3)}',
                'echo 1+(2+3);'
            ),
            21 => array(
                '{a ~ b|upper}',
                'echo $this->filter($this->a . $this->upper($this->b));'
            ),
            22 => array(
                '{(a ~ b)|upper}',
                'echo $this->filter($this->upper(($this->a . $this->b)));'
            ),
            23 => array(
                '{var|function("arg", 2)}',
                'echo $this->filter($this->function($this->var, \'arg\', 2));'
            ),
            24 => array(
                '{var^function("arg", 2)}',
                'echo pow($this->var, $this->function(\'arg\', 2));'
            ),
            25 => array(
                '{a: [string: [1, 2]]}',
                '$this->a = [\'string\' => [1, 2]];'
            ),
            26 => array(
                '{a: [string: [1, 2]]|sort}',
                '$this->a = $this->sort([\'string\' => [1, 2]]);'
            ),
            27 => array(
                '{function(-1)}',
                'echo $this->function(-1);'
            ),
        );
    }

    /**
     * @dataProvider expressionProvider
     */
    public function testExpressions($template, $expected)
    {
        $this->assertEquals($expected, $this->object->compilePartial($template));
    }

    public function blockProvider()
    {
        return array(
            0  => array(
                '{if true}{endif}',
                'if(true) {}'
            ),
            1  => array(
                '{if true}{else}{endif}',
                'if(true) {} else {}'
            ),
            2  => array(
                '{if some_var = 2 && func()}{endif}',
                'if($this->some_var == 2 && $this->func()) {}'
            ),
            3  => array(
                '{if some_var = 2 && func()}{elseif a = 2}{endif}',
                'if($this->some_var == 2 && $this->func()) {} elseif($this->a == 2) {}'
            ),
            4  => array(
                '{switch some_var}{case 5}{endswitch}',
                'switch($this->some_var) {case 5:}'
            ),
            5  => array(
                '{switch some_var}{else}{endswitch}',
                'switch($this->some_var) {default:}'
            ),
            6  => array(
                '{switch some_var}{case 2}{else}{endswitch}',
                'switch($this->some_var) {case 2:break; default:}'
            ),
            7  => array(
                '{switch some_var}{case 2}{case 3}{endswitch}',
                'switch($this->some_var) {case 2:break; case 3:}'
            ),
            8  => array(
                '{for i in []}{endfor}',
                'foreach([] as $this->i) {}'
            ),
            9  => array(
                '{for i => j in [a, "b"]}{endfor}',
                'foreach([$this->a, \'b\'] as $this->i => $this->j) {}'
            ),
            10 => array(
                '{if true}{else}{var}{endif}',
                'if(true) {} else {echo $this->filter($this->var);}'
            ),
            11 => array(
                '{if a in []}{endif}',
                'if($this->isIn($this->a, [])) {}'
            ),
            12 => array(
                '{if a in variable}{endif}',
                'if($this->isIn($this->a, $this->variable)) {}'
            ),
            13 => array(
                '{if a in function()}{endif}',
                'if($this->isIn($this->a, $this->function())) {}'
            ),
            14 => array(
                '{if set a}{endif}',
                'if(isset($this->a)) {}'
            ),
        );
    }

    /**
     * @dataProvider blockProvider
     */
    public function testBlocks($template, $expected)
    {
        $this->assertEquals($expected, $this->object->compilePartial($template));
    }

    public function tagsProvider()
    {
        return array(
            0 => array(
                '{a: b}',
                '$this->a = $this->b;'
            ),
            1 => array(
                '{a: [b, "c"]}',
                '$this->a = [$this->b, \'c\'];'
            ),
            2 => array(
                '{a: [b, "c"]|some_filter(arg)}',
                '$this->a = $this->some_filter([$this->b, \'c\'], $this->arg);'
            ),
            3 => array(
                '{a: [key: 2, "c"]}',
                '$this->a = [\'key\' => 2, \'c\'];'
            )
        );
    }

    /**
     * @dataProvider tagsProvider
     */
    public function testTags($template, $expected)
    {
        $this->assertEquals($expected, $this->object->compilePartial($template));
    }

    public function testTemplates()
    {
        $template = '{template "asd"}{variable}{endtemplate}';
        $expected = array(
            'asdTemplate' => 'echo $this->filter($this->variable);'
        );
        $this->assertEquals('', $this->object->compilePartial($template));
        $this->assertEquals($expected, $this->object->getTemplates());
    }
}
